datasource db {
    provider="sqlite"
    url="file:./dev.db"
}

generator client {
    provider = "prisma-client-js"
}   
/**
 * Model for a user
 */
model User {
    id String @id @default(uuid())
    email String @unique
    password String? @password @omit
    name String?
    teams Team[]
    posts Post[]
    groups Group[]

    // can be created by anyone, even not logged in
    @@allow('create', true)
    // can be read by users sharing any team
    @@allow('read', teams?[members?[auth() == this]])
    // full access by oneself
    @@allow('all', auth() == this)
}

/**
 * Model for a team 
 */
model Team {
    id String @id @default(uuid())
    name String
    members User[]
    post Post[]
    groups Group[]

    // everyone can create a team
    @@allow('create', true)
    // any user in the team can read the team
    @@allow('read', members?[auth() == this])
}

/**
* Base model for all entites in a team
*/
abstract model TeamBaseEntity {
    id String @id @default(uuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    isDeleted Boolean @default(false) @omit
    isPublic Boolean @default(false)
    owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    ownerId String
    team Team @relation(fields: [teamId], references: [id], onDelete: Cascade)
    teamId String
    groups Group[]

    // when create, owner must be set to current user, and user must be in the team
    @@allow('create', owner == auth() && team.members?[this == auth()])
    // only the owner can update it and is not allowed to change the owner
    @@allow('update', owner == auth() && team.members?[this == auth()] && future().owner == owner)
    // allow owner to read
    @@allow('read', owner == auth())
    // allow shared group members to read it
    @@allow('read', groups?[users?[this == auth()]])
    // allow team to access if public
    @@allow('read', isPublic && team.members?[this == auth()])
    // can not be read if deleted
    @@deny('all', isDeleted == true)
}

/**
* Model for a post
*/
model Post extends TeamBaseEntity {
    title String
    content String
}

/**
 * Model for a group
 */
model Group {
    id String @id @default(uuid())
    name String
    users User[]
    posts Post[]
    team Team @relation(fields: [teamId], references: [id])
    teamId String

    // group is shared by team
    @@allow('all', team.members?[auth() == this])
}